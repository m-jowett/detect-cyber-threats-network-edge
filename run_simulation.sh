#!/bin/bash

# m-jowett/detect-cyber-threats-network-edge
# 04/05/2022

# Run a simulation.

# Prepare the data.
# Build the docker images.
# Start the server.
# Start the client nodes.
# Register the client nodes with the server.
# Initiate the server/client model hyperparameters.
# For each training round:
# Trigger training on all nodes.
# Aggregate.
# Run validation depending on option selected.
# Dump logs to console.
# Kill containers.

# make sure in python env
# 	source fypenv/bin/activate

# pull up stats database first
# 	docker-compose up -d
# wait for 9200 to respond
# 	docker-compose down

# create tables
# 	python3 statistics.py

# https://docs.docker.com/engine/reference/commandline/docker/

# use absolute path throughout since script can be executed inside any folder
PATH_FYP="$(dirname "$0")"


# command line arguments
# simulation options
# see report for list and explanation
NUMNODES="$1"
NUMEPOCHS="$2"
SEQUENCELENGTH="$3"
HIDDENSIZE="$4"
NUMROUNDS="$5"
SETLABEL="$6"

DEVICETYPE="$7"

OFFLOAD="$8"
THREADLIMIT="$9"

ATTACKSPLIT="${10}"
BENIGNSPLIT="${11}"

FEDMETHOD="${12}"

# where possible load variables that usually remain static from config.json
# parse JSON config using https://stedolan.github.io/jq/

FEDWEIGHT=$(jq -c '.federated.fedWeight' "${PATH_FYP}/config.json")
echo "$FEDWEIGHT"

VALIDATIONSTATES="${13}"
# 0 - none
# 1 - after merge
# 2 - before and after merge
# 3 - last round after merge only

LONGTAIL="${14}"

NODE_SEED=$(jq -r '.default.seed' "${PATH_FYP}/config.json")

MODEL_LEARNRATE=$(jq -r '.model.learnRate' "${PATH_FYP}/config.json")
MODEL_INPUTSIZE=$(jq -r '.data.inputSize' "${PATH_FYP}/config.json")
MODEL_BATCHSIZE=$(jq -r '.model.batchSize' "${PATH_FYP}/config.json")

DATAPATH=$(jq -r '.default.dataPath' "${PATH_FYP}/config.json")


# optimisation
# determine whether or node the current generated data matches the simulation options
# if so skip data generation
GENERATE_DATA=1

if [ -f "${DATAPATH}/.info" ]; then
	if [ "$NUMNODES $NUMROUNDS $SEQUENCELENGTH $ATTACKSPLIT $BENIGNSPLIT $LONGTAIL" == "$(cat ${DATAPATH}/.info)" ]; then
		echo "Match skipping generating data."
		GENERATE_DATA=0
	fi
fi

if [ "$GENERATE_DATA" == "1" ]; then

	if [ ! -d "$DATAPATH" ]; then
		mkdir "$DATAPATH"

		# do not want IDE to constantly compare binary objects if inside git repo
		echo "*" > "${DATAPATH}/.gitignore"
	fi

	echo "Clear existing data"
	rm -v ${DATAPATH}/*.nodedata

	echo "Generate data"

	if [ "$LONGTAIL" == "1" ]; then
		echo "Long tail"
		python3 ${PATH_FYP}/generate_data_pareto.py "$NUMNODES" "$NUMROUNDS" "$SEQUENCELENGTH" "$ATTACKSPLIT" "$BENIGNSPLIT"
	else
		echo "Normal"
		python3 ${PATH_FYP}/generate_data_main.py "$NUMNODES" "$NUMROUNDS" "$SEQUENCELENGTH" "$ATTACKSPLIT" "$BENIGNSPLIT"
	fi

	# if data sucessfully generated, store the data generation options in .info for comparison next time run
	echo "$NUMNODES $NUMROUNDS $SEQUENCELENGTH $ATTACKSPLIT $BENIGNSPLIT $LONGTAIL" > "${DATAPATH}/.info"
fi

echo "Building images if required"

cp "${PATH_FYP}/server.py" "${PATH_FYP}/docker/server/"
cp "${PATH_FYP}/model.py" "${PATH_FYP}/docker/server/"
cp "${PATH_FYP}/statistics.py" "${PATH_FYP}/docker/server/"
# will replace latest but old copy is still saved if changes made
# need to clear them after a while, uses a lot of disk space
docker image build --tag "fyp-server" "${PATH_FYP}/docker/server/"


# only build the image intended for the device selected
if [ "$DEVICETYPE" == "cuda" ]; then

	echo "CUDA"

	cp "${PATH_FYP}/client.py" "${PATH_FYP}/docker/client-cuda/"
	cp "${PATH_FYP}/model.py" "${PATH_FYP}/docker/client-cuda/"
	cp "${PATH_FYP}/statistics.py" "${PATH_FYP}/docker/client-cuda/"
	docker image build --tag "fyp-client-cuda" "${PATH_FYP}/docker/client-cuda/"

else

	echo "CPU"

	cp "${PATH_FYP}/client.py" "${PATH_FYP}/docker/client/"
	cp "${PATH_FYP}/model.py" "${PATH_FYP}/docker/client/"
	cp "${PATH_FYP}/statistics.py" "${PATH_FYP}/docker/client/"
	docker image build --tag "fyp-client" "${PATH_FYP}/docker/client/"

fi



echo "Starting server."

# pass environment variables to docker container where required
# network driver should be generated by docker-compose script
docker run -d -p "8090:8080" --name "fyp-server-0" -e "NODE_SEED=${NODE_SEED}" -e "NODE_UUID=0" -e "NODE_THREADLIMIT=${THREADLIMIT}" --network "fyp_fyp-network" "fyp-server:latest"

# create client nodes
for UUID in $(seq 1 $NUMNODES); do 
	
	echo "Starting client ${UUID}"

	if [ "$DEVICETYPE" == "cuda" ]; then
		docker run -d --gpus 0 --name "fyp-client-${UUID}" -e "NODE_SEED=${NODE_SEED}" -e "NODE_UUID=${UUID}" -e "NODE_OFFLOAD=${OFFLOAD}" --network "fyp_fyp-network" -v "${DATAPATH}/:/fypdata:ro" "fyp-client-cuda:latest"
	else
		docker run -d --name "fyp-client-${UUID}" -e "NODE_SEED=${NODE_SEED}" -e "NODE_UUID=${UUID}" -e "NODE_OFFLOAD=${OFFLOAD}" --network "fyp_fyp-network" -v "${DATAPATH}/:/fypdata:ro" "fyp-client:latest"
	fi
	

done


echo "Waiting for node startup"

# TODO: FIND A DETERMINISTIC WAY TO DO THIS
sleep 5


echo "Register clients"

for UUID in $(seq 1 $NUMNODES); do
	echo "$UUID"

	# clients/server on same network, therefore IP can be domain name with node UUID
	curl -X POST -H "Content-Type: multipart/form-data" \
		-F "uuid=${UUID}" \
		-F "ip=fyp-client-${UUID}" \
		-F "port=8080" \
		"http://localhost:8090/registerClient"
	echo ""
done




echo "Init models"

curl -X POST -H "Content-Type: multipart/form-data" \
		-F "hiddenSize=${HIDDENSIZE}" \
		-F "inputSize=${MODEL_INPUTSIZE}" \
		-F "numEpochs=${NUMEPOCHS}" \
		-F "batchSize=${MODEL_BATCHSIZE}" \
		-F "sequenceLength=${SEQUENCELENGTH}" \
		-F "learnRate=${MODEL_LEARNRATE}" \
		"http://localhost:8090/initModel"
echo ""

curl -X POST "http://localhost:8090/initModelClients"
echo ""



echo "Training All"

V_DATASETS=$(jq -r '.data.datasets[][0]' "config.json" | tr "\n" "," | head -c -1) # REPLACE THIS

for ROUND in $(seq 1 $NUMROUNDS); do

	echo "ROUND $ROUND"

	# option 3 - only validate on last round
	# therefore if last round, set for validation
	if [ "$VALIDATIONSTATES" == "3" ] && [ "$ROUND" == "$NUMROUNDS" ]; then
		VALIDATIONSTATES=1
	fi

	# record the runtime of the round in UNIX seconds
	TIME_START=$(date +%s)

	# pass arguments required for statistics to be categorised to training trigger entrypoint
	curl -X POST -H "Content-Type: multipart/form-data" \
			-F "numRounds=${NUMROUNDS}" \
			-F "statsSet=${SETLABEL}_training" \
			-F "attackSplit=${ATTACKSPLIT}" \
			-F "benignSplit=${BENIGNSPLIT}" \
			-F "fedMethod=${FEDMETHOD}" \
			-F "fedWeight=${FEDWEIGHT}" \
			-F "longTail=${LONGTAIL}" \
			"http://localhost:8090/triggerTrainingAll"
	echo ""

	if [ "$VALIDATIONSTATES" == "2" ]; then
		echo "Validation before merge"
		
		curl -X POST -H "Content-Type: multipart/form-data" \
				-F "numRounds=${NUMROUNDS}" \
				-F "statsSet=${SETLABEL}_validation" \
				-F "datasets=${V_DATASETS}" \
				-F "mergeComplete=0" \
				-F "attackSplit=${ATTACKSPLIT}" \
				-F "benignSplit=${BENIGNSPLIT}" \
				-F "fedMethod=${FEDMETHOD}" \
				-F "fedWeight=${FEDWEIGHT}" \
				-F "longTail=${LONGTAIL}" \
				"http://localhost:8090/triggerValidationAll"
		echo ""
	fi


	echo "Gather all params from clients"

	curl -X GET "http://localhost:8090/gatherAllParams"
	echo ""

	# aggregation
	echo "$FEDMETHOD"
	
	curl -X POST -H "Content-Type: application/json" \
		-d "$FEDWEIGHT" \
		"http://localhost:8090/${FEDMETHOD}"
	echo ""
	

	
	echo "Send new global model params to all clients"
	
	curl -X GET "http://localhost:8090/sendParamsAll"
	echo ""
	
	
	
	if [ "$VALIDATIONSTATES" == "1" ] || [ "$VALIDATIONSTATES" == "2" ]; then
		echo "Validation after merge"
		
		curl -X POST -H "Content-Type: multipart/form-data" \
				-F "numRounds=${NUMROUNDS}" \
				-F "statsSet=${SETLABEL}_validation" \
				-F "datasets=${V_DATASETS}" \
				-F "mergeComplete=1" \
				-F "attackSplit=${ATTACKSPLIT}" \
				-F "benignSplit=${BENIGNSPLIT}" \
				-F "fedMethod=${FEDMETHOD}" \
				-F "fedWeight=${FEDWEIGHT}" \
				-F "longTail=${LONGTAIL}" \
				-F "uuid=1" \
				"http://localhost:8090/triggerValidationManual"
		echo ""
	fi

	TIME_END=$(date +%s)

	TIME_LAPSED="$((TIME_END-TIME_START))"

	echo "Time: ${TIME_LAPSED}"

done




echo "Dumping logs to console"

docker logs "fyp-server-0"

for UUID in $(seq 1 $NUMNODES); do
	docker logs "fyp-client-${UUID}"
done



echo "Stopping and removing containers"

docker stop -t 1 "fyp-server-0"
for UUID in $(seq 1 $NUMNODES); do
	docker stop -t 1 "fyp-client-${UUID}"
done

docker rm "fyp-server-0" -v
for UUID in $(seq 1 $NUMNODES); do
	docker rm "fyp-client-${UUID}" -v
done
